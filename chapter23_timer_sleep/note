间隔定时器
系统调用setitimer()创建了一个间隔式定时器
#include <sys/time.h>
int setitimer(int which, const struct itimerval *new_value , struct itimerval *old_value);
	returns 0 on success
ITIMER_REAL
	创建以真实时间倒计时的定时器．到期时会产生SIGALARM信号并发给进程
ITIMER_VIRTUAL
	创建以进程虚拟时间（用户模式下的cpu时间）倒计时的定时器．到期会产生SIGVTALRM
ITIMER_PROF
	创建一个profiling定时器，以进程时间（用户态与内核态ＣＰＵ时间的总和）倒计时，到期时，则会产生SIGPROF信号
对这些信号的默认处理，都是终止进程，所以应该设置相应的信号处理函数．每个进程只能拥有这三者当中的一种类型的间隔定时器

			struct itimerval {
               struct timeval it_interval; /* Interval for periodic timer */
               struct timeval it_value;    /* Time until next expiration */
           };

           struct timeval {
               time_t      tv_sec;         /* seconds */
               suseconds_t tv_usec;        /* microseconds */
           };
参数new_value的下属结构it_value指定了距离定时器到期的延迟时间．另一下属结构it_interval则说明了定时器是否为周期性定时器
如果it_interval的两个字段都是０，那么改定时器就属于it_value所指定的时间间隔到期的一次性定时器
在第二次调用setitmer是which参数要符合上一次调用的which参数.如果调用setitimer时将it_value的两个字段设置为０，那么会屏蔽任何已有的定时器

old_value参数用来返回定时器的上一次的设置，如果不关心，可以将old_value = NULL, 如果old_value.it_value的两个字段都是０，那么该定时器之前处于屏蔽状态

在任何时刻调用getitimer()系统调用，以了解定时器的当前状态，距离下次到期的剩余时间，这个操作就像setitimer的old_value一样，但是不需要更改定时器就可以获取

使用setitimer()(和alarm())创建的定时器可以跨越exec()调用而得以保存，但由fork（）创建的子进程并不继承该定时器
＂SUSv4废止了getitimer()和setitimer(),同事推荐使用POSIX定时器API＂

更为简单的定时器接口：alarm()
#include <unistd.h>
unsigned int alarm(unsigned int seconds);
	always succeeds, returning number of seconds remaining on any previously set timer, or  0 if no timer previously was set;
参数seconds表示定时器到期的秒数．到期时，回想调用进程发送SIGALRM信号
调用alarm()会覆盖对定时器的前一个设置．调用alaram(０)可屏蔽现有的定时器
alarm()返回值是定时器前一设置距离到期的剩余秒数，如果未设置定时器则返回０

linux中，alarm和setitimer()针对同一进程共享同一个实时定时器．两者会互相影响．但是不能不保证其他平台是相同的设定，为了确保应用程序可移植性，程序设置实时定时器，只能二者选其一

clock_getres(),可以用其返回值判断系统是否支持高分辨率定时器，这个只受底层硬件平台所支持的精度

为阻塞操作设置超时
	实时定时的用途之一是为了某个阻塞系统调用设置其处于阻塞状态的时间上限．

低分辨率的休眠
#include <unistd.h>
unsigned int sleep(unsigned int seconds );
	returns  0 on normal completion, or number of unslept seconds if prematurely terminated
考虑的可移植性，应该避免sleep()，alarm(),setitimer()混用，有可能在某些平台上sleep()是通过定时器和sigsuspend()来实现的，虽然linux中通过nanosleep()来实现的，但是还是不要混用

高分辨率的休眠
#define _POSIX_C_SOURCE 199309
#include <time.h>
int nanosleep(const struct timespec *request, struct timespec *remain);
	returns 0 on successfully completed sleep, or -1 on error or interrupted sleep

struct timespec {
               time_t tv_sec;        /* seconds */
               long   tv_nsec;       /* nanoseconds */
           };
SUSv3明文规定不得使用信号来实现nanosleep()函数
１．如果指定的时间间隔值并非软件时钟间隔的整数倍，那么会对其向上取整
２．如果nanosleep()被信号中断，可以用remain来重启启动nanosleep
当以高频率接受信号时，这一取整行为会对上述２中的方式产生问题．由于返回的remain时间未必是软件时钟间隔的整数倍，故而nanosleep()的每次重启都会遭到取整错误．其结果是，nanosleep()每次重启后的休眠
时间都要长于前一次调用的返回remain值，从而导致休眠永远结束不了
　　在linux 2.6中，使用带有TIMER_ABSTIME选项的clock_nanosleep()可以避免这一问题

linux　２．６中，nanosleep()在收到SIGCONT信号时将自动恢复，进程处于停止状态所消耗的时间也会记入休眠时间


POSIX时钟
linux中，调用此API的程序必须以-lrt选项进程编译，从而与librt(realtime, 实时)函数库链接
POSIX时钟的API的主要系统调用包括获取时钟当前的值clock_gettime(),返回时钟分辨率的clock_getres(),以及更新时钟的clock_settime()


系统调用clock_gettime()针对参数clockid所指定的时钟返回时间
#define _POSIX_C_SOURCE 199309
#include <time.h>
int clock_gettime(clockid_t clockid,  struct timespec *tp);
int clock_getres(clockid_t  clockid, struct timespec* res);
	Both return 0 on success,  or -1 on error;
clockid_t 是一种SUSv3定义的整数类型，用户表示时钟标识符
CLOCK_REALTIME				可设定的系统级实时时钟
CLOCK_MONOTONIC				不可设定的恒定态时钟
CLOCK_PROCESS_CPUTIME_ID	每进程ＣＰＵ时间的时钟
CLOCK_THREAD_CPUTIME_ID		每线程ＣＰＵ时间的时钟

系统调用clock_settime()利用参数tp所指向缓冲区中的时间来设置有clockid指定的时间
#define _POSIX_C_SOURCE 199309
#include <time.h>
int clock_settime(clockid_t clockid, const struct timespec *tp);
	returns 0 on success, or -1 on error;
如果由tp指定的时间并非由clock_getres()所返回时钟分辨率的整数倍，时间会向下取整
特权级(CAP_SYS_TIME)进程可以设置CLOCK_REALTIME时钟，其他时间都不可更改

要测试特定进程或线程所消耗的ｃｐｕ时间，首先可借助下面的函数来获取其时钟ＩＤ接着再一次返回ＩＤ调用clock_gettime(),从而获取进程或线程消耗的ＣＰＵ时间

#define _XOPEN_SOURCE 600
#include <time.h>
int clock_getcpuclockid(pid_t pid, clcokid_t *clockid);
	returns 0 on success , or  a positive error number on error;
参数pid为０时，clock_getcpuclockid()返回调用进程的ＣＰＵ时间时钟ＩＤ

#define _XOPEN_SOURCE 600
#include <pthread.h>
#include <time.h>
int pthread_getcpuclockid(pthread_t thread , clockid_t *clockid)
	returns 0 on success, or a positive error number on error;
高分辨率休眠的改进版:clock_nanosleep()
#define _XOPEN_SOURCE 600
#include <time.h>
int clock_nanosleep(clockid_t clockid, int flags, const struct timespec *request, struct timespec *remain)
	returns  0 on successfully completed sleep, or  a positive error number on error or interrupted sleep;

使用clock_nanosleep()的一个例子
struct timespec request;
/*retrieve current value of CLOCK_REALTIME clock*/
if(clock_gettime(CLOCK_REALTIME, &request) == -1)
	errExit("clock_gettime");
request.tv_sec+20; /*sleep  for 20 seconds from now*/
s = clock_nanosleep(CLOCK_REALTIME, TIMER_ABSTIME, &request, NULL);
if(s != 0){
	if(s == EINTR)
		printf("interrupted by signal handler\n");
	else
		printf("error\n");
}

使用setitimer()来设置经典UNIX间隔式定时器，会受到如下的制约
1.针对ITIMER_REAL, ITIMER_VIRTUAL和ITMER_PROF这３类定时器，每种只能设置一个
2.只能通过发送信号的方式来通知定时器到期，另外，也不能改变到期时产生的信号
3.如果一个间隔式定时器到期多次，且相应信号找到阻塞时，那么会只调用一次信号处理函数，换言之，无从知晓是否出现过定时器溢出（timer overrun）的情况
4.定时器的分辨率只能达到微妙级．不过，一些系统的硬件时钟踢动了更为精细的时钟分辨率，软件此时应采用这一较高分辨率

POSIX定时器ＡＰＩ将定时器周期划分为如下几个阶段
1．以系统调用timer_create()创建一个新定时器，并定义其到期时对进程的通知方法
２．以系统调用timer_settime()来启动或停止一个定时器
３．以系统调用timer_delete()删除不在需要的定时器
由fork()创建的子进程不会继承POSIX定时器，调用exec()期间亦或进程终止时将停止并删除定时器

创建定时器：timer_create()
＃define _POSIX_C_SOURCE 199309
#define <signal.h>
#include <time.h>
int timer_create(clockid_t clockid, struct sigevent *evp, timer_t *timerid);
	returns 0 on success, or -1 on error;
设置参数clockid,可以使用之前的CLOCK_REALTIME,CLOCK_MONOTONIC,CLOCK_PROCESS_CPUTIME_ID,...等，或者是clock_getcpuclockid(),pthread_getcpuclockid()返回的ｉｄ值
函数返回时会在参数timerid中放置定时器句柄（handle），供后续调用中指代该定时器
union sigval {          /* Data passed with notification */
           int     sival_int;         /* Integer value */
           void   *sival_ptr;         /* Pointer value */
       };

       struct sigevent {
           int          sigev_notify; /* Notification method */
           int          sigev_signo;  /* Notification signal */
           union sigval sigev_value;  /* Data passed with
                                         notification */
           void       (*sigev_notify_function) (union sigval);
                            /* Function used for thread
                               notification (SIGEV_THREAD) */
           void        *sigev_notify_attributes;
                            /* Attributes for notification thread
                               (SIGEV_THREAD) */
           pid_t        sigev_notify_thread_id;
                            /* ID of thread to signal (SIGEV_THREAD_ID) */
       };
通过man sigevent来参看
SIGEV_NONE
SIGEV_SIGNAL
SIGEV_THREAD
SIGEV_THREAD_ID

配备和接触定时器：timer_settime()
#define _POSIX_C_SOURCE 199309
#include <time.h>
int  timer_settime(timer_t  timerid, int flags, const struct  itimerspec *value, struct itmerspec *old_value)
	returns 0 on success, or -1 on error;

获取定时器的当前值timer_gettime()
#define _POSIX_C_SOURCE 199309
#include <time.h>
int timer_gettime(timer_t timerid, struct itimerspec *curr_value);
	returns 0 on success,or -1 on error;

删除定时器:timer_delete()
#define _POSIX_C_SOURCE 199309
#include <time.h>
int timer_delete(timer_t timeid);
	returns 0 on success, or -1 on error;
参数timerid是之前调用timer_create()时返回的句柄．对于已启动的定时器，会在移除前自动将其停止．如果因定时器到期而已存在待定（ｐｅｎｄｉｎｇ）信号，那么信号会保持这一状态当进程终止时，会自动删除所有定时器


利用文件描述符进行通知的定时器：timerfd API
#include <sys/timerfd.h>
int timerfd_create(int clockid, int flags)
	returns file descriptor on success, or -1 on error;
在内核版本2.6.27开始，flags支持TFD_CLOEXEC, TFD_NONBLOCK
timerfd_create()创建的定时器使用完毕后，应调用close()关闭相应的文件描述符
系统调用timerfd_settime()_可以配备（启动）或解除（停止）有文件描述符fd指定的定时器
#include <sys/timerfd.h>
int timerfd_settime(int fd, int flags , const struct itimerspec *new_value, strcut itimerspec *old_value);
	returns 0 on success, or -1 on error;
参数flags与timer_settime()中对应参数类似．可以是０，此时将new_value.it_value的值视为相对于调用timerfd_settime()时间点的相对时间，也可以设置为TFD_TIMER_ABSTIME,将其视为一个绝对时间（从时钟的０点开始测量）

系统调用timerfd_gettime()返回文件描述符fd所标志定时器的间隔以及剩余时间
#include <sys/timerfd.h>
int timerfd_gettime(int fd, struct itimerspec *curr_value);
	returns 0 on success, or -1 on error;

 调用fork(),子进程会集成timerfd_create()的描述符，指代同一个定时器，两个进程都可以read()这个到期信息
 timerfd_create()的文件描述符能跨越exec()得以保存（除非设置了TFD_CLOEXEC标志），已配备的定时器在exec()后会继续生成到期信息
 
 一个到期信息是uint64_t 的无符号８字节整数大小
