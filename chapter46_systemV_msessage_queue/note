#include <sys/types.h>
#include <sys/msg.h>
int msgget(key_t key, int msgflg);
	returns message queue idenfitier on success, or -1 on error;
key是IPC_PRIVATE或ftok()返回的一个键

msgflg  - IPC_CREAT , IPC_EXCL

交换消息
	msgsnd(), msgrcv()
	第一个参数是消息队列标识符,第二参数msgp是一个由程序员定义的结构的指针,其类似于
	struct mymsg{
		long mtype;
		char mtext[];
	}
	mtext字段的长度可以为0,当对于接受进程来讲所需传递的消息仅通过消息类型就能表示或只需要知道一条消息本身是否存在,这种做法有时候变得非常有用

发送消息
	#include <sys/types.h>
	#include <sys/msg.h>
	int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
	returns 0 on success, or -1 on error;
	使用msgsnd()发送消息必须要将消息结构中的mtype字段的值设为一个大于0的值;msgsz参数制定了mtext字段中包含的字节数
	msgflg是一组标记的位掩码,用于控制msgsnd()的操作
	IPC_NOWAIT,执行一个非阻塞的操作,如果队列满了,返回一个EAGAIN错误,如果阻塞的情况下,msgsnd()可能被信号中断,其返回EINTR错误,其不会自动重启,不管是否对信号设置了SA_RESTART

接受消息
	msgrcv()从消息队列中读取(以及删除)一条消息并将其内容复制进msgp指向的缓冲区
	#include <sys/types.h>
	#include <sys/msg.h>
	ssize_T  msgrcv(int msqid, void *msgp, size_t maxmsgsz, long msgtyp, int msgflg);
		returns number of bytes copied into mtext field , or -1 on error;
	maxmsgsz用来指定msgp中mtext字段的最大空间,如果队列中待删除的消息的大小超过了maxmsgsz字节,那么就不会从队列中删除消息,并且msgrcv()会返回错误E2BIG,可以通过标记MSG_NOERROR规避这个情况,在这种情况下,会截断待删除的消息,将待删除的消息截断maxmsgs大小,多余的将会被丢弃
	可以通过控制msgtyp的值来选择接受哪个消息
		1.msgtyp == 0 , 其表示任意消息,其会删除队列中的第一条消息并将其返回给调用进程
		2.msgtyp > 0 ,那么会将队列中第一条mtype== msgtyp的消息删除并将其返回给调用进程.这样可以避免多进程读取队列消息时的竞争状态,比较有用一项技术就是将各个进程ID作为消息type,各自的进程只选择自己进程ID相关的消息
		3.msgtyp < 0,那么会将等待消息当成优先队列来处理.队列中mtype最小并且其值小于或等于msgtyp的绝对值的第一条消息会被删除并返回给调用进程
		针对第三种情况来举例
		队列位置		消息类型		消息正文(mtext)
			1		300			...
			2		100			...
			3		200			...
			4		400			...
			5		100			...
		如果执行了msgrcv(id, &msg, maxmsgsz, -300 ,0 );
		其删除消息并返回给调用进程的循序如果 2(100), 5(100),3(200),1(300);后续的调用会被阻塞,因为400超过了300
	
	msgflg可以去如下的值
	IPC_NOWAIT:执行一个非阻塞的接收,如果指定了这个标志进行接收,如果没有对应的消息,返回ENOMSG错误,返回EAGAIN一致性更强一点,但是返回这个值是有历史原因的,SUSv3也要求返回ENOMSG
	MSG_EXCEPT:只有当msgtype大于0的时候这个值才会起到作用,其效果是默认情况的反向,其是linux中特有的,将队列中第一条不等于msgtype的消息删除并返回给调用进程.需要定义_GNU_SOURCE之后,才会在<sys/msg.h>中看见;对应上面的例子,msgrcv(id, &msg, maxmsgsz, 100, MSG_EXCEPT)将返回1, 3, 4循序的消息,之后阻塞
	MSG_NOERROR:可以对消息截断,在上面介绍maxmsgsz的时候已经介绍过了

消息队列控制操作
	#include <sys/types.h>
	#include <sys/msg.h>
	int msgctl(int msgid, int cmd, struct msgid_ds *buf)
	cmd:
		IPC_RMID:立即删除消息队列对象以及其关联的msgid_ds数据结构.队列中剩余消息都会被丢弃
		IPC_STAT:将于这个消息队列关联的msgid_ds数据结构的副本放到buf指向的缓冲区中
		IPC_SET:使用buf指向的缓冲区提供的值更新与这个消息队列关联的msgid_ds数据结构中被选中的字段
	struct msqid_ds {
               struct ipc_perm msg_perm;     /* Ownership and permissions */  上一章节介绍过
               time_t          msg_stime;    /* Time of last msgsnd(2) */ 	消息队列刚已创建其为0,之后每次成功调用msgsnd()都会将这个字段设置为当前时间
               time_t          msg_rtime;    /* Time of last msgrcv(2) */	和上一条一样,只是是这对的msgrcv()调用
               time_t          msg_ctime;    /* Time of last change */		当消息队列被创建或成功执行IPC_SET操作之后这个字段被设置成当前值
               unsigned long   __msg_cbytes; /* Current number of bytes in	消息队列被创建时为0,后续每次成功调用msgsnd(),msgrcv()都会对这个字段调整以反应所有消息的mtext字段包含的字节数
                                                queue (nonstandard) */
               msgqnum_t       msg_qnum;     /* Current number of messages	消息队列被创建时为0,后续每次成功msgsnd()会递增这个字段,msgrcv()会递减这个字段反应队列中的消息总数
                                                in queue */
               msglen_t        msg_qbytes;   /* Maximum number of bytes		这个字段的值为队列中所有消息的mtext总字节数定义了一个上限.默认是MSGMNB,特权进程可以使用IPC_SET进行修改返回是0-INT_MAX
                                                allowed in queue */			特权用户可以修改linux特有的/proc/sys/kernel/msgmnb文件中包含的值以修改所有后续创建的消息队列的初始msg_qbytes
               pid_t           msg_lspid;    /* PID of last msgsnd(2) */	队列被创建时为0,后续每次成功的msgsnd()调用会将其设置为调用进程PID
               pid_t           msg_lrpid;    /* PID of last msgrcv(2) */	和上一条一样,只是针对的是msgrcv()调用
           };

       The ipc_perm structure is defined as follows (the highlighted fields are settable using IPC_SET):

           struct ipc_perm {
               key_t          __key;       /* Key supplied to msgget(2) */
               uid_t          uid;         /* Effective UID of owner */
               gid_t          gid;         /* Effective GID of owner */
               uid_t          cuid;        /* Effective UID of creator */
               gid_t          cgid;        /* Effective GID of creator */
               unsigned short mode;        /* Permissions */
               unsigned short __seq;       /* Sequence number */
           };
消息队列的限制
	MSGMNI:限制了系统中所能创建的消息队列标识符的个数
	MSGMAX:规定了单条消息最多可写入的字节数
	MSGMNB:一个消息队列中最多保存的字节数.到达这个值时,队列满,相应的调用阻塞,除非是IPC_NOWAIT
	MSGTQL:消息队列所能存放的总数
	MSGPOOL:它规定了用来存放系统中所有消息队列中的数据的缓冲区的大小;考虑mtext大小为0,但是通过msgtype来传递消息的情况,这个涵盖了这种情况下的缓冲区的大小限制
	限制				上限值				/proc/sys/kernel中对应的文件
	MSGMNI			32768				msgmni
	MSGMAX			依赖于可用内存			msgmax
	MSGMNB			213783647			msgmnb

	linux特有的msgctl()IPC_INFO操作能够获取一个类型为msginfo的结构体,其中包含了各种消息队列的限制值
	struct msginfo  buf;
	msgctl(0, IPC_INFO, (struct msqid_ds *)&buf);
	
显示系统中所有消息队列
	ls /proc/sysvipc/
	msg  sem  shm
	第二种方法:通过linux特有的的一组IPC ctl(msgctl(), semctl(), shmctl())
	MSGINFO, SEM_INFO,SHM_INFO
		1.返回一个结构体来描述系统上所有消息队列(或相应其他)的资源消耗情况
		2.作为ctl调用函数返回结果,它将返回指向表示消息队列对象数据结构的entries数据中最大项的下标.需要定义_GNU_SOURCE
	MSG_STAT,SEM_STAT,SHM_STAT:和IPC_STAT操作一样,这些操作获取一个IPC对象的关联结构体,但是存在两个差异
		1.这些操作的第一个参数是entries数组中的一个下标
		2.如果执行成功了,作为函数结果,ctl调用返回与该下标对应的IPC对象的标识符
	按照下面的步骤可以列出系统上所有消息队列
		1.使用MSG_INFO操作找到消息队列的entries数组的最大下标
		2.执行一个循环,对0到maxid(包含)之间的每一个值执行一个MSG_STAT操作.在循环过程中忽略因entries数组中的元素为空而发生的错误(EINVAL)以及数组中元素所引用的对象上不具备相应的权限发生的错误(EACCESS)

使用消息队列实现客户端-服务器应用程序
	1.客户端和服务器使用一个消息队列(缺点,带宽小,a.可能发生死锁,在消息队列满的情况下,客户端写和服务器写同时发生;b.一个不良或恶意客户端就是不读服务器相应消息),对于a情况可以通过两个队列来规避,一个存放客服端请求的数据,一个用来存放服务器的相应消息
	2.一个客户端使用一个消息队列;每个客户端都要自己创建一个队列,而且消息队列有限制,不是无限的,注意服务器应该允许出现客户端的消息队列不再存在的情况

	第一种方式
	客服端发送请求(mtype = 1, mtext包含客户端的PIC) -> 消息队列 -> 服务器读取请求(选择消息mtype = 1 ) -> 服务器发送响应(mtype = 客户端PIC) -> 消息队列->客户端读取响应(选择msgtype == 自己的PID)
	
System V 消息队列有以下缺点
	1.消息队列是通过标识符引用的,不是像文件一样通过文件描述符,这样select. epoll这种机制不适用
	2.适用键而不是文件名来标示消息队列会增加额外的程序设计复杂度,同时还用ipcs和ipcrm替换ls 和rm 
	3.消息队列是无连接的.这样就有问题,一个应用程序何时安全地删除一个消息队列?应用程序如何确保不再使用的队列会被删除
	4.消息队列的总数.消息的大小以及单个队列的容量都有限制
