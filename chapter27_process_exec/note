#include <unistd.h>
int execve(const char *pathname, char *const argv[], char *const envp[]);
	never returns  on success, returns -1 on error;
１．调用execve()之后，因为同一进程依然存在，所以进程ＩＤ仍保持不变，还有一些其他进程的属性保持不变，这个会在２８章中说明
２．如果pathname所指定的程序文件设置了set-user-ID（set-group-ID）权限位，那么系统调用会在执行此文件时将进程的有效用户（组）ID设置为程序文件的属主（组）ＩＤ
３．无论是否更改了有效ＩＤ，也不管这一变化是否生效，execve()都会以进程的有效用户ＩＤ去覆盖已保存的（saved）set-user-ID,以进程的有效组ID去覆盖已保存的（saved）set-group-ID
这个系统调用永不返回，一旦返回就意味着失败
可以查看man execve来看返回错误的错误码对应的信息

一些库函数建立在execve系统调用之上
int execle(const char *path, const char *arg, ...
                       /*, (char *) NULL, char * const envp[] */);
int execlp(const char *file, const char *arg, ...
                       /* (char  *) NULL */);
int execvp(const char *file, char *const argv[]);
int execv(const char *path, char *const argv[]);
int execl(const char *path, const char *arg, ...
                       /* (char  *) NULL */);

#define  _GNU_SOURCE
 #include <unistd.h>

 int fexecve(int fd, char *const argv[], char *const envp[]);

解释器脚本
所谓解释器，就是能够读取并执行文本格式命令的程序．
各种unix shell,以及诸如awk,sed,perl,python和ruby之类的程序都属于解释器
unix内核运行解释器脚本的方式与二进制程序无异，前提是脚本必须满足下面亮点要求：
	１．必须赋予脚本文件可执行权限
	２．文件的起始行必须指定运行脚本解释器的路径名
	格式如下：
		#! interpreter-path [optional-arg]
		在解释该路径名时不会使用环境变量PATH,解释器路径名后还可跟随可选参数，二者之间以空格分割．可选参数中不应该包含空格

解释器脚本的执行
	因为脚本并不包含二进制机器码，所有当调用execve()来运行脚本时，显然发生了一些不同寻常的事件．execve()如果检测到传入的文件以两个字符#!开头，就会析取改行的剩余部分（路径名以及参数），然后按如下参数列表来执行解释器程序：
	interpreter-path [optional-arg] script-path arg ...
	这里interpreter-path(解释器路径)和optional-arg(可选参数)都取自脚本的#!行，script-path（脚本路径）是传递给execve()的路径名，arg...则是通过变量argv传递给execve()的参数列表（不过将argv[0]排除在外）

使用execlp()和execvp()执行脚本
	通常，脚本缺少#!起始行将导致exec()函数执行失败，不过上述两个调用是特例，如果在PATH的路径中找到文件，有执行权限，同时并非二进制格式，且起始行不以#!开头，那么就会使用shell来解释这一文件

文件描述符与exec()
可以继承fd,除非对文件描述符设置了O_CLOEXEC标志

信号与exec()
exec()在执行时会将现有进程的文本段丢弃，该文本段包括了调用进程创建的信号处理器程序．既然处理器已经不知所踪，内核就会将对所有已设信号的处理重置为SIG_DEL.而对所有其他信号的处置维持不变，就是说原先的信号的默认处理是term的，被更改为ignore后，在exec()后，这样的ignore处理保持不变
对SIGCHLD设置为SIG_IGN后可以阻止僵尸进程的产生，ｌｉｎｕｘ中这个也会在exec()后保留, 如果考虑到可移植性，需要在exec()调用的程序之前重新signal(SIGCHLD,SIG_IGN)
信号备选栈也遭到移除
信号的掩码和挂起信号集得到保留

执行shell命令：system()
#include <stdlib.h>
	int system(const char *command);
		see main test for a description of return value
1.如果command为ＮＵＬＬ，　shell能执行返回１，不可用返回０
２．如果不可创建子进程或是无法获取其终止状态返回－１
３．如果子进程不能执行ｓｈｅｌｌ命令，返回exit(127)的ｗａｉｔ值，即为32512->7F00
4.如果能运行即返回执行命令的返回结果exit(ret)的wait值，比如ls 返回０，system返回值为０，如果１，ret = 256 -> 0x100
