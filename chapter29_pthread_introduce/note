多进程来处理并发任务有如下这些限制
1.进程间的信息难以共享
2.调用fork()来创建进程的代价相对较高.即便利用了写时复制技术,仍然需要复制诸如内存页表和文件描述符表之类的进程属性
线程可以解决上述问题
1.线程可以快捷方便共享信息.
2.线程创建比进程要快10倍
除了共享全局内存外,线程还共享了一干其他属性
1.进程ID和父进程ID
2.进程组ID与会话ID
3.控制终端
4.进程凭证(用户ID和组ID)
5.打开文件描述符
6.由fcntl创建的记录锁
7.信号处置
8.文件系统的相关设置:文件权限掩码,当前工作目录和跟目录
9.间隔定时器(setitimer)和posix定时器(tiemr_create)
10.系统V(system V)信号量撤销
11.资源限制
12.nice值
各线程所独有的属性,如下列出了其中一部分
1.线程ID(thread ID)
2.信号掩码
3.线程特有数据
4.备选信号栈
5.errno变量
6.浮点型环境
7.实时调度策略和优先级
8.cpu亲和力
9.能力
10.栈
pthread_t 			线程ID
pthread_mutex_t     互斥对象
pthread_mutexattr_t	互斥属性对象
pthread_cond_t      条件变量
pthread_condattr_t  条件变量的属性对象
pthread_key_t       线程特有数据的键
pthread_once_t      一次性初始化控制上下文
pthread_attr_t      线程的属性对象
SUSv3并未规定如何实现这些数据类型,可移植的程序应将其视为"不透明"数据.亦及,程序应避免对此类类型变量的结构或内存产生任何依赖.尤其是,不能使用c语言的比较操作符(==)去比较这些类型的变量

在linux中,多线程程序中,每个线程都有属于自己的errno.在linux中,线程特有errno的实现方式与大多数unix实现类似:将errno定义为一个宏,可展开为函数调用,改函数返回一个可修改的左值,且为每个线程所独有

pthreads函数均以返回0表示成功,返回一正值表示失败.这一失败时的返回值,与传统的unix系统调用置于errno中的值含义相同
在linux平台中,在编译调用了pthread api的程序中,需要设置cc -pthread的编译选项,有如下效果
	1.定义_REENTRANT预处理宏.这回公开对少数(reentrant)函数的声明
	2.程序会与库libpthread进行链接
#include <pthread.h>
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start)(void *), void *arg);
	returns 0 on success,  or a positive error number on error;

将经强制转换的整型数作为线程start函数的返回值时,必须小心处理.原因在于,取消线程时,返回值PTHREAD_CANCELED,通常是由实现所定义的整型数,再经强制传唤成void *.若某甲线程的start函数将此整型值返回给
正在执行pthread_join()操作的线程某乙,某乙会误认为某甲遭到取消
参数thread,指向pthread_t 类型的缓冲区,在pthread_create()返回之前,会在此保存线程的唯一标示

终止线程
1.线程start函数执行return 语句并返回指定值
2.线程调用pthread_exit()
3.调用pthread_cancel()取消线程
4.任意线程调用exit(),或这主线程执行了return语句(在main()函数中),都会导致进程中的所有线程立即终止

pthread_exit()函数将终止调用线程,且其返回值可由另一线程通过pthread_join()来获取
#include <pthread.h>
void pthread_exit(void *retval);
调用pthread_exit()相当于在线程start函数中执行return,不通之处在于,可在线程start函数所调用的任意函数中调用pthread_exit()
参数retval指定了线程的返回值,retval所指向的内容不应该分配于线程栈中,因为线程终止之后,将无法确定线程栈中的内容是否有效.出于相同理由,也不应该在线程栈中分配线程start函数的返回值
如果主线程调用了pthread_exit(),而非调用exit()或是执行return语句,那么其他线程将继续运行

#include <pthread.h>
pthread_t  pthread_self();
	returns the thread ID of the calling thread;

函数pthread_equal()可检查两个线程的ID是否相同
include <pthread.h>
int pthread_equal(pthread_t  t1, pthread_t t2);
	returns nonzero value if t1 and t2 are equal, otherwise 0

函数pthread_join()等待由thread 标识的线程终止(如果线程已经终止,pthread_join()会立即返回).这种操作被称为连接(joining)
#include <pthread.h>
int pthread_join(pthread_t thread, void **retval);
	returns 0 on success, or a positive error number on error;
如向pthread_join()传入一个之前已经连接过的线程ID,将会导致无法预知的行为
若线程并未分离,则必须使用pthread_join()来进行连接.如果未能连接,那么线程终止将产生僵尸线程,与僵尸进程类似.除了浪费系统资源外,僵尸线程若累计过多,应用将无法创建新的线程
pthread_join()执行的功能类似与针对进程waitpid()调用,不过两者存在一些差异
	1.线程之间是对等的关系.进程中的任意线程均可以调用pthread_join()与该进程的任何其他线程连接起来.
		父进程如果使用fork()创建了子进程,那么它是唯一能够对子进程调用wait()的进程
	2.无法"链接任意线程"(对于进程,则可以通过调用waitpid(-1, &status, options))做到这一点,也不能以非阻塞方式链接(类似WNOHANG标志的waitpid()).使用条件变量可以实现类似功能

默认情况下,线程是可链接的(joinable),也就是说,当线程退出时,其他线程可以通过pthread_join()获取返回状态.有时,程序员并不关心线程的返回状态,只是希望系统在线程终止时能够自动清理并移除之,可以调用
pthread_detach()并想thread参数传入指定线程的标识符,将该线程标记为处于分离(detached)状态
#include <pthread.h>
int pthread_detach(pthread_t thread);
	returns 0 on success, or a positive error number on error;

一旦线程处于分离状态,就不能再使用pthread_join()来获取其状态,也无法使其重返"可连接"状态
其他线程调用exit(),或是主线程执行return语句时,即便遭到分离的线程也还是会受到影响.此时不管线程状态是分离还是可连接状态,进程的所有线程会立即终止,换言之,pthread_detach()只是控制线程终止之后所发生的事情,而非何时或如何终止线程

线程属性
	线程栈的位置和大小,线程调度策略,优先级,以及线程是否处于可连接或分离状态
	pthread_attr_t attr;
	pthread_attr_init(&attr);
	pthread_attr_destroy(&attr);

