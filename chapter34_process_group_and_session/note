进程组:
	是由一个或多个进程组成,一个进程组有一个首进程,其是创建进程组的进程,进程组有生命周期,直到最后一个进程退出,进程组首进程没有必要是第一个退出进程组的进程
会话:
	是一组进程组的集合;一个会话中的所有进程共享单个控制终端 ,会话首进程是创建该新会话的进程,其进程ID会成为会话ID.新进程会继承其父进程的会话ID
	在任一时刻,会话中的其中一个进程组会成为终端的前台进程组,其他进程组会成为后台进程组
	当用户在控制终端中输入其中一个信号,该信号会被发送到前台进程组中所有成员
	当到控制终端的连接建立起来之后,会话首进程会成为该终端的控制进程.成为控制进程的主要标志是当断开与终端之间的连接时内核会向该进程发送一个SIGHUP信号
#include <unistd.h>
pid_t getpgrp()
	always successfully returns process group ID of calling process
如果getpgrp()的返回值与调用进程的进程ID匹配的话就说明该调用进程是其进程组的首进程

#include <unistd.h>
int setpgid(pid_t pid, pid_t pgid);
	returns 0 on success, or -1 on error;
如果将pid的值设为0,那么调用进程的进程组ID就会改变.如果将pgid的值设置成0,那么ID为pid的进程的进程组ID.因此下面的setpgid()调用是等价的:
setpgid(0,0);
setpgid(getpid(), 0);
setpgid(getpid(), getpid());
如果pid和pgid参数指定了同一个进程,那么会创建一个新进程组.如果两个参数的值不同,那么setpgid()调用会将一个进程从一个进程组中移到另一个进程组中去
在调用setpgid()有如下限制
1.pid参数可以仅指定调用进程或其中一个子进程.否则会返回ESRCH错误
2.在组之间移动进程时,调用进程,由pid指定的进程(可能是另外一个进程,也可能就是调用进程)以及目标进程组必须要属于同一个会话.否则会导致EPERM错误
3.pid参数所指定的进程不能是会话首进程.违反这条规则会返回EPERM错误
4.一个进程在其子进程已执行exec()之后就无法修改改子进程的进程组ID了.违反这条规则会导致EACCESS错误.之所以会有这条限制的原因是一个进程开始执行之后再修改其进程组ID的话会使程序变得混乱


会话:
#define _XOPEN_SOURCE 500
#include <unistd.h>
pid_t getsid(pid_t pid);
	returns session ID of specified process, or (pid_t ) -1 on error;
如果参数pid的值为0,那么getsid()会 返回调用进程会话ID

如果调用进程不是进程组首进程,那么setsid()会创建一个新会话
#include <unistd.h>
pid_t setsid(void)
	returns session ID of new session, or -1 on error;
setsid()系统调用会按照下列步骤创建一个新会话
1.调用进程成为新会话的首进程和改会话中新进程组的首进程.调用进程的进程组ID和会话ID会被设置成该进程的进程ID
2.调用进程没有控制终端.所有之前到控制终端的连接会被断开
如果调用进程是一个进程组的首进程,那么setsid()调用会报EPERM错误
	避免这个错误的发生的最简单的方式执行一个fork()并让父进程终止以及让子进程调用setsid().由于子进程会继承其父进程的进程组ID并接受属于自己的唯一进程ID,因此它无法成为进程组首进程

控制终端和控制进程
一个会话中的所有进程可能会拥有一个控制终端.会话在被创建出来的时候是没有控制终端的,当会话首进程首次打开一个还没有成为其他某个会话的控制终端时会建立控制终端,除非在调用open()时指定O_NOCTTY标志.一个终端至多成为一个会话的控制终端
控制终端会被由fork()创建的子进程集成并且在exec()调用中得到保持
当会话首进程打开了一个控制终端之后,它同时也成为了该终端的控制进程.发生终端断开之后,内核会向控制进程发送一个SIGHUP信号来通知这一事件的发生
如果一个进程拥有一个控制终端,那么打开特殊文件/dev/tty就能够获取该终端的文件描述符,如果进程没有控制终端,那么在打开/dev/tty时会报错ENXIO

使用ioctl(fd,TIOCNOTTY)操作能够删除进程和文件描述符fd制定的控制终端之间的关联关系.在调用这个函数之后再试图打开/dev/tty文件就会失败

	如果调用进程是终端的控制进程,那么在控制进程终止时会发生下列事件
	1.会话中的所有进程将会失去与控制终端之间的关联关系
	2.控制终端失去了与该会话之间的关联关系,因此另一个会话首进程就能够获取该终端以成为控制进程
	3.内核会向前台进程组的所有成员发送一个SIGHUP信号(和一个SIGCONT信号)来通知它们控制终端的丢失

 获取表示控制终端的路径名ctermid()
#include <stdio.h>
char *ctermid(char *ttyname);
	returns  pointer to string containing pathname of controlling terminal,or null if pathname could not be determined

控制终端保留了前台进程组的概念.在一个会话中,在同一时刻只有一个进程能成为前台进程,会话中的其他所有进程都是后台进程组.前台进程组时唯一能够自由读取和写入控制终端的进程组.当在控制终端中输入一个信号生成终端字符之后,终端驱动器会讲相应的信号发送给前台进程组的成员

tcgetpgrp()和tcsetpgrp()函数分别获取和修改一个终端的前台进程组
#include <unistd.h>
pid_t  tcgetpgrp(int fd);
	returns process group ID of terminal`s foreground process group,or -1 on error;

int tcsetpgrp(int fd , pid_t  pgid);
	returns 0 on success, or -1 on error;
tcgetpgrp()函数返回文件描述符fd所制定的终端的前台进程组的进程组ID,该终端必须是调用进程的控制终端
如果这终端没有前台进程组,那么tcgetpgrp()返回一个大于1并且与所有既有进程组ID都不匹配的值
tcsetpgrp()函数修改一个终端的前台进程组.如果调用进程拥有一个控制终端,那么文件描述符fd引用的就是那个终端,接着tcsetpgrp()会讲终端的前台进程组设置为pgid参数制定的进程组,该参数必须与调用进程所属的会话中的一个进程组ID匹配

作业控制
shell会为后台的每个进程赋一个唯一的作业号.当作业在后台运行之后以及在使用各种作业控制命令操作或监控作业时作业号会显示在方括号中.作业号后面的数字时执行这个命令的进程的进程ID或管道中最后一个进程的进程ID;%num用来指定作业,num是shell赋给作业的作业号
很多情况下可以省略%num的,省略%num时默认指当前作业.当前作业时在前台最新被停止的作业.%%和%+是表示当前作业,%-是表示上一个当前作业.在jobs命令输出中,当前的和上一个当前作业分别用(+)和(-)标志
[1]   Running                 geany note &
[2]-  Running                 sleep 60 &
[3]+  Running                 sleep 60 &

fg让作业在前台运行
bg让作业在后台运行
只有前台作业中的进程才能够从控制终端中读取输入.这个限制条件避免了多个作业竞争读取终端输入.如果后台作业尝试从终端中读取输入,就会接受到一个SIGTTIN信号,SIGTTIN信号的默认处理方式是停止作业
在默认情况下,后台作业是被允许向控制终端输入内容的.当如果终端设置了TOSTOP标志(终端输出停止),那么当后台作业尝试在终端上输出时会导致SIGTTOU信号,其会让作业停止

SUSv3对后台进程的SIGTTIN和SIGTTOU信号的产生规定了一些特殊情况(linux实现了这些规定)
	1.当进程当前处于阻塞状态或忽略SIGTTIN信号的状态时则不发送SIGTTIN信号,这时试图从控制终端发起read()调用会失败,errno会设置成EIO.这种行为的逻辑时没有这种行为的话进程就无法知道不允许进行read()操作
	2.即使终端设置了TOSTOP标记,当进程当前处于阻塞或忽略SIGTTOU信号的状态时,也不发送SIGTTOU信号.这时向控制终端中发起write()调用时允许的
	3.不管是否设置了TOSTOP标志,当后台进程试图在控制终端上调用会修改终端驱动器数据结构的特定函数时会生成SIGTTOU信号,这些函数包括tcsetpgrp(),tcsetattr(),tcflush(),tcflow(),tcsendbreak()以及tcdrain()如果SIGTTOU信号被阻塞或被忽略,这些调用会成功

在SIGTSTP信号处理函数中重新发起SIGTSTP信号的处理方式参考书本

孤儿进程组
如果一个进程组中至少拥有一个成员拥有一个位于同一会话但不同进程组的父进程,就不是孤儿进程组
根据定义,会话首进程位于孤儿进程组中.这时因为setsid()在新会话中创建了一个新进程组,而会话首进程的父进程则位于不同的会话中

如果一个进程组变成了孤儿进程组并且拥有很多已停止的成员,那么系统会向进程组中的所有成员发送一个SIGHUP信号通知它们已经与会话断开连接了,之后在发送一个SIGCONT信号确保它们恢复执行.如果孤儿进程组不包含被停止的成员,那么就不会发送任何信号

向孤儿进程组中发送SIGTSTP,SIGTTIN,SIGTTOU信号毫无意义,因为一旦被停止了,它将再无法恢复了,所以执行read(),write()调用时,内核会返回EIO错误,,而不是发送SIGTTIN和SIGTTOU信号
基于类似原因,如果SIGTSTP,SIGTTIN,SIGTTOU信号的发送会导致停止孤儿进程组中的成员,那么这个信号会毫无征兆的丢弃(如果信号正在被处理,那么信号已经被分送给了进程)这种行为不会因为信号的发送方式的改变而改变,kill()或者终端驱动器生成
