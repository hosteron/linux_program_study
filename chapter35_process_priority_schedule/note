循环时间共享
公平性:每个进程都有机会用到CPU
响应度:一个进程在使用CPU之前无需等待太长的时间
#include <sys/resource.h>
int getpriority(int which, id_t who);
	returns (possibly negative) nice value of specified process on success, or -1 on error
int setpriority(int which, id_t who , int prio);
	returns 0 on success, or -1 on error;
which 参数确定who参数如何被解释.这个参数的取值为下面这些值中的一个
PRIO_PROCESS
	操作进程ID为who的进程.如何who为0,那么使用调用者的进程的ID
PRIO_PGRP
	操作进程组ID为who的进程组中的所有成员.如果who为0,那么使用调用者的进程组
PRIO_USER
	操作所有真实用户ID为who的进程.如果who为0,那么使用调用者的真实用户ID

SCHED_RR策略
 优先级相同的进程以循环时间分享的方式执行.进程每次使用CPU的时间为一个固定长度的时间片.一旦被调度执行之后,使用SCHED_RR策略的进程会保持对CPU的控制直到下列条件中的一个得到满足:
	1.达到时间片的终点
	2.自愿放弃CPU,这可能是由于执行了一个阻塞式系统调用或调用了sched_yield()系统调用
	3.终止了
	4.被一个优先级更高的进程抢占了
对上面列出的前两个事件,当运行在SCHED_RR策略下的进程丢掉CPU之后将会被放置在其优先级对应的队列的队尾
在最后一种情况中,当优先级更高的进程执行结束之后,被抢占的进程会继续执行直到其时间片的剩余部分被消耗完(即被抢占的进程仍然位于其优先级对应的队列的队头)
  在SCHED_RR和SCHED_FIFO两种策略中,当前运行的进程可能会因为下面某个原因而被抢占
    1.之前被阻塞的高优先级进程解除阻塞了
    2.另一个进程的优先级被提到了一个级别高于当前运行的进程的优先级的优先级
    3.当前运行的进程的优先级被降低到低于其他可运行的进程的优先级了
SCHED_RR策略与标准的循环时间分享调度算法类似,即它也允许优先级相同的一组进程分享CPU时间.它们之间最重要的差别在于SHCED_RR策略存在严格的优先级级别,高优先级的进程总是优先于优先级较低的进程.而在SCHED_OTHER策略中,低NICE值
的进程不会独占CPU,它仅仅在调度策略时为进程提供一个较大的权重

SCHED_FIFO策略
	SCHED_FIFO(先入先出)策略与SCHED_RR策略类似,它们之间主要的差别在于SCHED_FIFO策略中不存在时间片,一旦一个SCHED_FIFO进程获得了CPU的控制权之后,它就会一直到下面某个条件被满足
		1.自动放弃CPU
		2.终止了
		3.被一个优先级更高的进程抢占了
	在第一种情况张,进程会被放置在其优先级对应的队列的队尾.在最后一种情况中,当高优先级进程执行结束之后,被抢占的进程会继续执行(即被抢占的进程位于与其优先级对应的队头)

SCHED_BATCH策略
SCHED_IDLE策略

#include<sched.h>
int sched_get_priority_min(int policy);
int sched_get_priority_max(int policy);
	Both return nonnegative integer priority on success, or -1 on error;

修改调度策略和优先级
#include <sched.h>
int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);
	returns 0 on success, or -1 on error;
struct sched_param{
	int sched_priority;
};
policy参数制定了进程调度策略:
SCHED_FIFO 实时先入先出
SCHED_RR  实时循环
SCHED_OTHER 标准的循环时间分享
SCHED_BATCH 与SCHED_OTHER类似,但用于批量执行
SCHED_IDLE 与SCHED_OTHER类似,但优先级比最大的nice值(+19)还要低
成功调用了sched_setschedular()会将pid指定的进程移到与优先级对应的队列的队尾
通过fork()创建的子进程会继承父进程的调度策略和优先级,并且在exec()调用中会保持这些信息

sched_setparam()系统调用提供了sched_setscheduler()函数的一个功能子集,它修改了一个进程调度策略,但不会修改其优先级
#include <sched.h>
int sched_setparam(pid_t  pid, const struct sched_param *param);
	returns 0 on success,  or -1 on error;

获取调度策略和优先级
#include <sched.h>
int sched_getscheduler(pid_t pid);
	returns  scheduling policy , or -1 on error;
int sched_getparam(pid_t pid, struct sched_param *param);
	returns 0 on success, or -1 on error;

释放CPU
实时进程可以通过两种方式自愿释放CPU;通过调用一个阻塞进程的系统调用或者调用sched_yield()
#include <sched.h>
int sched_yield()
	returns 0 on success, or -1 on error;
sched_yield()的操作比较简单.如果存在与调用进程优先级相同的其他排队的可运行进程,那么调用进程会被放到队尾,队列中队头的进程将会被调度使用CPU.如果在该优先级队列中不存在可运行的进程,那么sched_yield()不会做任何事情,调用进程会继续使用CPU

SCHED_RR的时间片
#include <sched.h>
int sched_rr_get_interval(pid_t pid, struct timespec *tp);
	returns 0 on success, or -1 on error;

CPU亲和力
	当一个进程在一个多处理器系统上被重新调度时无需在上一次执行的CPU上运行,之所以这样是因为原来的CPU处于忙碌
	进程切换CPU时队性能有一定的影响:
		如果在原来的CPU的高速缓冲器中存在进程数据,那么为了将进程的一行数据加载进新的CPU高速缓冲器中,首先必须使这行数据失效(即在没有被修改的情况下丢弃数据,在被修改的情况下将数据写入内存)(为了防止高速缓冲器不一致,多处理器架构在某个时刻只允许数据被存放
		在一个CPU高速缓冲器中),这使得数据失效的过程会消耗时间.由于存在这个性能影响,linux内核尝试了给进程保证软CPU亲和力--在允许的情况下进程重新被调度到原来的CPU上运行

有时需要为进程设置硬CPU亲和力,这样就能显式地将其限制在可用CPU中的一个或一组CPU上运行.之所以需要这样做,原因如下:
	1.可以避免由高速缓冲器中的数据失效所带来的性能影响
	2.如果多个线程(或进程)访问相同的数据,那么当将他们限制在相同的CPU上的话可能会带来性能上的提升,因为他们无需竞争数据并且也不存在由此而产生的高速缓冲器未命中
	3.对于时间关键的应用程序来讲,可能需要为此应用程序预留一个或更多的CPU,而将系统中大多数其他应用限制在其他的CPU中

#define _GNU_SOURCE
#include <sched.h>
int sched_setaffinity(pid_t pid, size_t len, cpu_set_t *set);
	returns 0 on success, or -1 on error;

#define _GNU_SOURCE
#include <sched.h>
void CPU_ZERO(cpu_set_t *set);
void CPU_SET(int cpu, cpu_set_t *set);
void CPU_CLR(int cpu, cpu_set_t *set);
int CPU_ISSET(int cpu, cpu_set_t *set);

#define _GNU_SOURCE
#include <sched.h>
int sched_getaffinity(pid_t pid, size_t len , cpu_set_t *set);
	returns 0 on success,  or -1 on error;
CPU亲和力通过fork()创建的子进程得以继承,并在exec()中得以保留
