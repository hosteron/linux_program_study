堆是一段长度可变的连续虚拟内存，始于进程的未初始化数据段末尾，通常将堆的当前内存边界称为“program break”
改变堆的大小（即分配或释放内存），其实就像命令内核改变进程的program break位置一样简单，最初。program break 正好位于未初始化数据段末尾之后，和&end之后
在program break的位置抬升之后，程序可以访问新分配区域内的任何地址，而此时物理内存页尚未分配。内核会在进程首次试图访问这些虚拟内存地址时，自动分配新的物理内存页
传统的unix系统提供了两个操控program break的系统调用：brk()和sbrk(),在linux中依然可用
#include <unistd.h>
int brk(void *end_data_segment);
	return 0 on success, or -1 on error;
void *sbrk(intptr_t increment);
	returns previous program break on success, or (void *) -1 on error;
系统调用brk()会将program break设置为参数end_data_segment所指定的位置，由于虚拟内存以页为单位进程分配，end_data_segment实际会四舍五入到下一个内存页的边界处

当试图将program break设置为一个低于初始值（即低于&end）的位置时，有可能导致无法预知的行为，例如，当程序试图访问的数据位于初始化或未初始化数据段中当前尚不存在的部分时，会
引发分段内存访问错误（segmentation fault）(SIGSEGV 信号)
program break可以设定的精确上限取决于一系列因素，这包括进程中对数据段大小的资源限制，以及内存映射，共享内存段，共享库的位置

调用sbrk（）将program break在原有地址上增加从参数increment传入的大小，用于声明increment的intptr_t类型属于整数数据类型。若调用成功，sbrk()返回前一个program break
的地址。换言之，如果program break增加，那么返回值是指向这块新分配内存其实位置的指针
调用sbrk(0)将返回program break的当前位置，对其不做改变

malloc函数族在堆上分配和释放内存。较之brk(),sbrk()，具有不少优点
1.属于C语言标准的一部分
2.更便于在多线程程序中使用
3.接口简单，允许分配小块内存
4.允许随意释放内存块，它们被维护与一张空闲内存列表中，在后续内存分配调用时循环使用
malloc()函数在堆上分配参数size字节大小的内存，并返回指向新分配内存起始位置处的指针，其所分配的内存未经初始化
#include <stdlib.h>
void *malloc(size_t size);
	returns pointer to allocated memory on success, or null on error
malloc()返回内存块所采用的字节对其方式，总是适宜于高效访问任何类型的C语言数据结构。在大多数硬件架构上，这意味着malloc是基于8字节或16字节边界来分配内存的
#include <stdlib.h>
void free(void *ptr);
一般情况下，free()并不会降低program break的位置。而是将这块内存添加到空闲内存列表中，供后续的malloc()函数循环使用
1.被释放的内存块通常会位于堆的中间，而非堆的顶部，因而降低program break是不可能的
2.它最大限度的减少了程序必须执行的sbrk()调用次数
3.在大多数情况下，降低program break的位置不会对那些分配大量内存的程序有多少帮助，因为它们通常倾向于持有已分配内幕才能或反复释放和重新分配内存，而非释放所有内存后再持续运行一段时间
如果传递给free()函数一个空指针，那么函数什么都不做
在什么情况下调用free()
1.显式调用free()能使程序在未来修改时更具可读性和维护性
2.如果使用malloc调试库来查找程序的内存泄露问题，那么会将任何未释放处理的内存报告为内存泄露

谨慎使用malloc和free
1.分配一个内存后，只能在范围内修改
2.不能释放同一个指针两次及以上
3.不是malloc的内存，不能调用free释放
3.需要长时间运行的程序，如果反复分配内存，那么确保释放所有已使用完毕的内存，不然会内存泄露

malloc 调试工具和库
1.mtrace()和muntrace -> MALLOC_TRACE搭配使用，该变量定义了写入最终信息的文件名；通过mtrace命令来分析这个文件
2.mcheck()和mprobe()函数允许程序对已分配的内存块进行一致性检查， gcc -lmcheck 来链接mcheck库
3.MALLOC_CHECK_ - 0, 1, 2
就malloc 调试库，其提供了和标准malloc函数包相同的API,但附加了捕获内存分配错误的功能

控制和监测malloc函数包
mallopt()能修改各项参数，以控制malloc所采用的算法，例如，此类参数之一就指定了在调用sbrk()函数进行堆缩放之前，在空闲列表尾必须保有的可释放内存空间的最小值
另一个参数则规定了从堆中分配的内存块大小的上限，超出上限的内存块则使用mmap()系统调用来分配
mallinfo()函数返回一个结构，其中包含由malloc()分配的内存的各种统计数据

#include <stdlib.h>
void *calloc(size_t numitem, size_t size);
	returns pointer to allocated memory on success, or null on error
void *realloc(void *ptr, size_t size);
	returns pointer to allocated memory on success , or  null  on error
realloc(ptr, 0) 相当于free(ptr)之后调用malloc(0);
realloc(NULL, size) 相当于调用malloc(size);

nptr = realloc(ptr, newsize);
if(nptr == NULL)
{
	/*handle error*/
}
else
{
	ptr = nptr
}
由于realloc可能会移动内存块，任何指向该内存块内部的指针在调用realloc()之后都可能失效。仅有一种内存块内的位置引用方法依然有效，即以指向此块内存起始处的指正+一个偏移量来进行定位

#include <malloc.h>
void *memalign(size_t boundary, size_t size);
	return pointer to allocated memory on success, or NULL on error;
函数memalign()分配size个字节的内存，起始地址是参数boundary的整数倍，而boudary必须是2的整数次幂。函数返回已分配的内存的地址

#include <stdlib.h>
int posix_memalign(void **memptr, size_t alignment, size_t size);
	return 0 on suscess, or a pasitive error num  on error
1.已分配的内存地址通过参数memptr返回
2.内存与alignment参数的整数倍对齐，alignment必须是sizeof(void *)与2的整数次幂两者之间的乘积
int s;
void *memptr;
s = posix_memalign(&memptr, 1024*sizeof(void *), 65536);

在堆栈上分配内存：alloca()
#include <alloca.h>
void *alloca(size_t size);
	return pointer to allocated block of memeory
不需要调用free()来释放alloca()分配的内存
不能在一个函数的参数列表中调用alloca()
func(x, alloca(size), z); // WRONG!!!
正确的做法
void *y;
y = alloca(size);
func(x, y, z);

