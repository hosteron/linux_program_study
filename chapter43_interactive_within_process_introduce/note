IPC工具分类
1.通信
2.同步
3.信号
尽管其中一些工具关注的是同步,但通用术语进程间通信IPC通常指代所有这些工具
可以将通信工具分成两类
1.数据传输工具:
	区分这些工具的关键因素是写入和读取的概念.为了进行通信,一个进程将数据写入到IPC工具中,另一个进程从中读取数据.这些工具要求在用户内存和内核内存进行两次数据传输:
		一次传输是在写入的时候从用户内存到内核内存,另一次的传输是在读取的时候从内核内存到用户内存
	可以进一步将数据传输工具分成下列类型:
		a.字节流
		b.消息:每个读取操作读取由写者写入的一整条数据,无法只读取部分消息,而把剩余部分留在IPC中,也无法在一个读取操作中读取多条消息
		c.伪终端
	尽管一个数据传输工具可能会有多个读取者,但读取操作是具有破坏性的.读取操作会消耗数据,其他进程将无法获取所消耗的数据.socket中可以使用	MSG_PEEK来执行非破坏性读取,UDP socket允许将一条消息广播或组播到多个接受者
	读取者和写者进程之间的同步是原子的.如果一个读取者试图从一个当前不包含数据的数据传输工具中读取数据,那么在默认情况下读取操作会被阻塞直至一些进程向内核工具写入数据
	
2.共享内存:
	共享内存允许进程通过将数据放到由进程间共享的一块内存中以完成信息的交换.
		内核通过将每个进程中的页表条目指向一个RAM分页来实现这一功能
			一个进程可以通过将数据放到共享内存中使得其他进程读取这些数据.由于通信无需系统调用以及用户内存和内核内存之间的数据传输.因此共享内存的速度非常快
	大多数unix 系统提供了三种形式的共享内存;
		System v共享内存, POSIX共享内存以及内存映射
		注意点:
			a.虽然速度快,但是需要同步
			b.放入共享内存中的数据对所有共享这块内存的进程可见

3.同步工具
	a.信号量,linux提供了System V 和 POSIX信号量
	b.文件锁:文件锁和记录锁
	linux中通过eventfd()系统调用额外提供了一种非标准的同步机制

System IPC 设计问题
system V IPC工具是无连接的,他们没有提供引用一个打开的IPC对象的句柄(类似于文件描述符)的概念.内核不会记录进程已经"打开"了该对象(与其他的IPC对象不同).这意味着内核无法维护当前使用该对象的进程的引用计数,其结果是应用程序需要使用额外的代码来知道何时可以安全地删除一个对象
sytem V IPC工具的编程借口与传统的UNIX IO模型是不一致的(他们使用整数键和IPC标识符,而不是路径名和文件描述符)

持久性
	进程持久性
		管道,FIFO, socket
	内核持久性
		System IPC和 POSIX IPC
	文件系统持久性
		唯一一种具备文件系统持久性的IPC对象是基于内存映射文件的共享内存
性能
	在应用程序的整体性能中,IPC工具的性能的影响因素可能不是很大,并且确定选择何种IPC工具可能并不仅仅需要考虑其性能因素
	各种IPC工具在不同的unix实现或linux的不同内核中的性能可能是不同的
	最重要的是,IPC工具的性能可能受到使用方式和环境的影响.相关的因素包括每个IPC操作交换的数据单元的大小,IPC工具中未读数据量可能很大,每个数据单元的交换是否需要进行进程上下文切换,以及系统上的其他负载

	如果IPC性能是至关重要的,并且不存在应用程序与目标系统匹配的环境中运行的性能基准,那么最好编写一个抽象软件层来向应用程序隐藏IPC工具的细节,然后在抽象层下使用不同的IPC工具来测试性能
